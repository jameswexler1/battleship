
=== ./static/js/battleship.js ===
// ./static/js/battleship.js
import { shipsToPlaceTemplate, shipSizes, totalShipCells } from './config.js';
import { adjustStatusPosition, adjustLayout, createTargetsEl, wrapBoards, addStyles, createMuteBtn } from './ui.js';
import { initBoard, createBoard, placeShipAttempt, previewShip, clearPreview, selectNextShip, addPlacementListeners, addAttackListeners } from './board.js';
import { initConnectivity } from './connectivity.js';
import { startGame, resetGame, handleMove, handleResult } from './game.js';
import { allShipsPlaced } from './board.js';

const myBoardEl = document.getElementById("my-board");
const opponentBoardEl = document.getElementById("opponent-board");
const statusEl = document.getElementById("status");
const myIdEl = document.getElementById("my-id");
const connectBtn = document.getElementById("connect-btn");
const readyBtn = document.getElementById("ready-btn");
const opponentInput = document.getElementById("opponent-id");
const generateBtn = document.getElementById("generate-room");
const resetBtn = document.createElement("button");
resetBtn.textContent = "Reset Ships";
const orientationBtn = document.createElement("button");
orientationBtn.textContent = "Toggle Orientation (Horizontal)";
orientationBtn.addEventListener("click", () => {
  state.orientation = state.orientation === "horizontal" ? "vertical" : "horizontal";
  orientationBtn.textContent = `Toggle Orientation (${state.orientation.charAt(0).toUpperCase() + state.orientation.slice(1)})`;
});
const rematchBtn = document.createElement("button");
rematchBtn.textContent = "Rematch";
// Insert buttons after readyBtn (before boards for better visibility)
readyBtn.parentNode.insertBefore(orientationBtn, readyBtn.nextSibling);
readyBtn.parentNode.insertBefore(resetBtn, orientationBtn.nextSibling);
readyBtn.parentNode.insertBefore(rematchBtn, resetBtn.nextSibling);
let state = {
  myTurn: false,
  myBoard: [],
  opponentBoard: [],
  shipsToPlace: shipsToPlaceTemplate.map(ship => ({ ...ship })),
  currentShip: null,
  orientation: "horizontal",
  ready: false,
  opponentReady: false,
  rematchReady: false,
  opponentRematchReady: false,
  gameStarted: false,
  myHits: 0,
  opponentHits: 0,
  isMuted: false,
  room: null,
  sendReady: null,
  getReady: null,
  sendMove: null,
  getMove: null,
  sendResult: null,
  getResult: null,
  sendRematch: null,
  getRematch: null,
  sendChat: null,
  getChat: null,
  sunkOpponentShips: [],
  opponentConnected: false,
  opponentId: null,
  roomId: null
};
state.placementClickHandler = (e) => placeShipAttempt(e.target, state, statusEl, readyBtn, resetBtn);
state.previewHandler = (e) => previewShip(e.target, state);
state.clearHandler = () => clearPreview();
state.attackClickHandler = (e) => {
  const cell = e.target;
  const x = parseInt(cell.dataset.x);
  const y = parseInt(cell.dataset.y);
  if (state.myTurn && state.gameStarted && state.room && state.opponentConnected && !cell.classList.contains('hit') && !cell.classList.contains('miss') && !cell.classList.contains('deduced-miss')) {
    state.sendMove({ type: "move", x, y });
    state.myTurn = false;
    statusEl.textContent = "Status: Waiting for opponent...";
  }
};
const controlsDiv = document.querySelector('main > div:first-child');
controlsDiv.classList.add('controls');
addStyles();
window.addEventListener('resize', () => adjustStatusPosition(statusEl));
adjustStatusPosition(statusEl);
adjustLayout();
const targetsEl = createTargetsEl(shipSizes);
wrapBoards(myBoardEl, opponentBoardEl, targetsEl);
createMuteBtn(controlsDiv, state);
initBoard(myBoardEl, opponentBoardEl, state, statusEl, readyBtn, resetBtn, orientationBtn, rematchBtn);
resetBtn.addEventListener("click", () => {
  state.myBoard = createBoard(myBoardEl);
  addPlacementListeners(state.myBoard, state);
  state.shipsToPlace.forEach(ship => {
    ship.placed = false;
    ship.positions = [];
  });
  selectNextShip(state, statusEl);
  readyBtn.style.display = "none";
  resetBtn.style.display = "none";
});
function serializeState(state) {
  return {
    shipsToPlace: state.shipsToPlace.map(ship => ({ name: ship.name, size: ship.size, placed: ship.placed, positions: ship.positions })),
    myHits: state.myHits,
    opponentHits: state.opponentHits,
    myTurn: state.myTurn,
    ready: state.ready,
    opponentReady: state.opponentReady,
    gameStarted: state.gameStarted,
    isMuted: state.isMuted,
    orientation: state.orientation,
    sunkOpponentShips: state.sunkOpponentShips,
    opponentId: state.opponentId,
    myBoardCells: state.myBoard.map(row => row.map(cell => ({ hasShip: cell.hasShip, hit: cell.hit, attacked: cell.attacked }))),
    opponentBoardCells: state.opponentBoard.map(row => row.map(cell => ({ hit: cell.el.classList.contains('hit'), miss: cell.el.classList.contains('miss'), deducedMiss: cell.el.classList.contains('deduced-miss') }))),
  };
}
function saveState(theState) {
  if (theState.roomId) {
    localStorage.setItem(`battleship-state-${theState.roomId}`, JSON.stringify(serializeState(theState)));
  }
}
function loadAndApplyState(roomId, theState, myBoardEl, opponentBoardEl, statusEl, readyBtn, resetBtn, orientationBtn, rematchBtn) {
  const saved = localStorage.getItem(`battleship-state-${roomId}`);
  if (!saved) return false;
  const data = JSON.parse(saved);
  theState.shipsToPlace = data.shipsToPlace.map(ship => ({ ...ship, positions: ship.positions.map(p => ({ ...p })) }));
  theState.myHits = data.myHits;
  theState.opponentHits = data.opponentHits;
  theState.myTurn = data.myTurn;
  theState.ready = data.ready;
  theState.opponentReady = data.opponentReady;
  theState.gameStarted = data.gameStarted;
  theState.isMuted = data.isMuted;
  theState.orientation = data.orientation;
  theState.sunkOpponentShips = data.sunkOpponentShips;
  theState.opponentId = data.opponentId;
  // Rebuild boards
  theState.myBoard = createBoard(myBoardEl);
  data.myBoardCells.forEach((row, y) => {
    row.forEach((c, x) => {
      theState.myBoard[y][x].hasShip = c.hasShip;
      theState.myBoard[y][x].hit = c.hit;
      theState.myBoard[y][x].attacked = c.attacked;
      if (c.hasShip) theState.myBoard[y][x].el.classList.add('ship');
      if (c.hit) theState.myBoard[y][x].el.classList.add('hit');
      if (c.attacked && !c.hit) theState.myBoard[y][x].el.classList.add('miss');
    });
  });
  theState.opponentBoard = createBoard(opponentBoardEl);
  data.opponentBoardCells.forEach((row, y) => {
    row.forEach((c, x) => {
      const el = theState.opponentBoard[y][x].el;
      if (c.hit) el.classList.add('hit');
      if (c.miss) el.classList.add('miss');
      if (c.deducedMiss) el.classList.add('deduced-miss');
    });
  });
  addAttackListeners(theState.opponentBoard, theState);
  // Apply sunk ships to targets
  theState.sunkOpponentShips.forEach(size => {
    const shipRep = document.querySelector(`.ship-rep[data-size="${size}"]:not(.sunk)`);
    if (shipRep) shipRep.classList.add('sunk');
  });
  // Handle UI based on state
  if (theState.myHits === totalShipCells || theState.opponentHits === totalShipCells) {
    theState.gameStarted = false;
    orientationBtn.style.display = "none";
    resetBtn.style.display = "none";
    readyBtn.style.display = "none";
    readyBtn.disabled = true;
    rematchBtn.style.display = "block";
    statusEl.textContent = theState.myHits === totalShipCells ? "You win! Waiting for rematch..." : "You lost! Waiting for rematch...";
  } else if (theState.gameStarted) {
    orientationBtn.style.display = "none";
    resetBtn.style.display = "none";
    readyBtn.style.display = "none";
    readyBtn.disabled = true;
    statusEl.textContent = "Waiting for opponent to reconnect...";
  } else {
    addPlacementListeners(theState.myBoard, theState);
    selectNextShip(theState, statusEl);
    orientationBtn.style.display = "block";
    rematchBtn.style.display = "none";
    readyBtn.disabled = false;
    if (allShipsPlaced(theState)) {
      readyBtn.style.display = "block";
      resetBtn.style.display = "block";
    } else {
      readyBtn.style.display = "none";
      resetBtn.style.display = "none";
    }
  }
  return true;
}
state.save = () => saveState(state);
state.loadAndApply = (roomId) => loadAndApplyState(roomId, state, myBoardEl, opponentBoardEl, statusEl, readyBtn, resetBtn, orientationBtn, rematchBtn);
initConnectivity(generateBtn, connectBtn, opponentInput, myIdEl, statusEl, controlsDiv, readyBtn, rematchBtn, state, () => startGame(state, statusEl, orientationBtn, resetBtn, rematchBtn), () => resetGame(state, myBoardEl, opponentBoardEl, statusEl, readyBtn, rematchBtn, orientationBtn, resetBtn), (x, y) => handleMove(x, y, state, statusEl, rematchBtn), (data) => handleResult(data, state, statusEl, rematchBtn));



=== ./static/js/wordle-words-pt.txt ===
abril
acaso
amigo
balao
canto
dados
exame
festa
ganho
hotel
ideal
jovem
largo
magia
noite
outro
poder
quero
risco
sobre



=== ./static/js/wordle-words-it.txt ===
acqua
amico
bello
canto
donna
esame
festa
gioco
hotel
isola
largo
magia
notte
ombra
piano
quale
risco
sogno
tempo
uomo



=== ./static/js/config.js ===
// ./static/js/config.js
export const iceServers = [
  { urls: 'stun:stun.relay.metered.ca:80' },
  { urls: 'stun:stun.l.google.com:19302' },
  { urls: 'stun:stun1.l.google.com:19302' },
  { urls: 'stun:stun2.l.google.com:19302' },
  { urls: 'stun:stun3.l.google.com:19302' },
  { urls: 'stun:stun4.l.google.com:19302' },
  { urls: 'stun:global.stun.twilio.com:3478' },
  {
    urls: "turn:global.relay.metered.ca:80",
    username: "4a2277c3086875e0dd39eec5",
    credential: "vzFuqmL2yuT2t5N5",
  },
  {
    urls: "turn:global.relay.metered.ca:80?transport=tcp",
    username: "4a2277c3086875e0dd39eec5",
    credential: "vzFuqmL2yuT2t5N5",
  },
  {
    urls: "turn:global.relay.metered.ca:443",
    username: "4a2277c3086875e0dd39eec5",
    credential: "vzFuqmL2yuT2t5N5",
  },
  {
    urls: "turns:global.relay.metered.ca:443?transport=tcp",
    username: "4a2277c3086875e0dd39eec5",
    credential: "vzFuqmL2yuT2t5N5",
  },
];

export const config = {
  appId: 'battleship-p2p-game', // Unique app ID to avoid collisions
  trackerUrls: [
    'wss://tracker.btorrent.xyz',
    'wss://tracker.openwebtorrent.com',
    'wss://tracker.webtorrent.dev',
    'wss://tracker.fastcast.nz',
    'wss://tracker.sloppyta.co:443/announce',
    'wss://tracker.novage.com.ua:443/announce'
  ],
  rtcConfig: { iceServers }
};

export const shipsToPlaceTemplate = [
  { name: "Battleship", size: 4, placed: false, positions: [] },
  { name: "Cruiser 1", size: 3, placed: false, positions: [] },
  { name: "Cruiser 2", size: 3, placed: false, positions: [] },
  { name: "Destroyer 1", size: 2, placed: false, positions: [] },
  { name: "Destroyer 2", size: 2, placed: false, positions: [] },
  { name: "Destroyer 3", size: 2, placed: false, positions: [] },
  { name: "Patrol Boat 1", size: 1, placed: false, positions: [] },
  { name: "Patrol Boat 2", size: 1, placed: false, positions: [] },
  { name: "Patrol Boat 3", size: 1, placed: false, positions: [] },
  { name: "Patrol Boat 4", size: 1, placed: false, positions: [] }
];

export const totalShipCells = 20; // 4 + 3+3 + 2+2+2 + 1+1+1+1

export const hitSound = new Audio('https://therecordist.com/assets/sound/mp3_14/Explosion_Large_Blast_1.mp3');
export const victorySound = new Audio('https://orangefreesounds.com/wp-content/uploads/2023/06/Victory-fanfare-sound-effect.mp3');
export const defeatSound = new Audio('https://freesound.org/data/previews/183/183077_2374229-lq.mp3');

export const shipSizes = [
  { size: 4, count: 1 },
  { size: 3, count: 2 },
  { size: 2, count: 3 },
  { size: 1, count: 4 }
];



=== ./static/js/connectivity.js ===
// ./static/js/connectivity.js
import { joinRoom, selfId } from 'https://esm.run/trystero/torrent';
import { config } from './config.js';
import { allShipsPlaced } from './board.js';

export function initConnectivity(generateBtn, connectBtn, opponentInput, myIdEl, statusEl, controlsDiv, readyBtn, rematchBtn, state, startGame, resetGame, handleMove, handleResult) {
  myIdEl.textContent = selfId;
  generateBtn.addEventListener("click", () => {
    if (state.room || state.opponentConnected || state.gameStarted) {
      if (!confirm("This will end the current game and start a new one. Continue?")) {
        return;
      }
      if (state.room) {
        state.room.leave();
        state.room = null;
      }
      resetGame();
    }
    const roomId = crypto.randomUUID();
    // Update the URL with the room ID without reloading
    window.history.pushState({}, '', `${window.location.pathname}?room=${roomId}`);
    opponentInput.value = roomId;
    connectBtn.click(); // Auto-join the generated room
  });
  connectBtn.addEventListener("click", () => {
    const roomId = opponentInput.value.trim();
    if (!roomId) {
      statusEl.textContent = "Status: Enter or generate a Room ID first.";
      return;
    }
    // If the button is in "Reconnect" mode, reload the page instead of attempting to rejoin
    if (connectBtn.textContent === 'Reconnect') {
      location.reload();
      return;
    }
    // Remove existing share button if any
    const existingShareBtn = document.getElementById('share-game-btn');
    if (existingShareBtn) {
      existingShareBtn.remove();
    }
    // Create styled share button
    const shareBtn = document.createElement('button');
    shareBtn.id = 'share-game-btn';
    shareBtn.textContent = 'Share Game Link';
    shareBtn.classList.add('share-btn');
    const link = `${window.location.origin}${window.location.pathname}?room=${roomId}`;
    shareBtn.addEventListener('click', async () => {
      if (navigator.share) {
        try {
          await navigator.share({ title: 'Join my Battleship Game!', text: 'Click to join the game:', url: link });
        } catch (err) {
          console.error('Share failed:', err);
        }
      } else {
        try {
          await navigator.clipboard.writeText(link);
          shareBtn.textContent = 'Copied!';
          shareBtn.classList.add('copied');
          setTimeout(() => {
            shareBtn.textContent = 'Share Game Link';
            shareBtn.classList.remove('copied');
          }, 2000);
        } catch (err) {
          console.error('Copy failed:', err);
        }
      }
    });
    controlsDiv.appendChild(shareBtn);
    if (roomId === state.roomId && state.room) {
      // Already in this room, just refresh peers and status
      const peers = Object.keys(state.room.getPeers());
      const peersLength = peers.length;
      if (state.gameStarted) {
        if (peersLength === 1) {
          state.opponentConnected = true;
          state.opponentId = peers[0];
          statusEl.textContent = state.myTurn ? "Status: Your turn!" : "Status: Opponent's turn...";
        } else {
          statusEl.textContent = "Status: Waiting for opponent to reconnect...";
        }
      } else {
        if (peersLength === 1) {
          state.opponentConnected = true;
          state.opponentId = peers[0];
          statusEl.textContent = "Status: Connected. Place ships...";
        } else {
          statusEl.textContent = "Status: Room joined. Waiting for opponent...";
        }
      }
      toggleConnectUI(false);
      return;
    }
    state.roomId = roomId;
    const loaded = state.loadAndApply(roomId);
    statusEl.textContent = "Status: Joining room...";
    console.log('Joining room:', roomId);
    if (state.room) {
      state.room.leave();
    }
    state.room = joinRoom(config, roomId);
    // Setup actions for data exchange
    [state.sendReady, state.getReady] = state.room.makeAction('ready');
    [state.sendMove, state.getMove] = state.room.makeAction('move');
    [state.sendResult, state.getResult] = state.room.makeAction('result');
    [state.sendRematch, state.getRematch] = state.room.makeAction('rematch');
    [state.sendChat, state.getChat] = state.room.makeAction('chat');
    // Listen for opponent joining (for status update)
    state.room.onPeerJoin(peerId => {
      console.log('Opponent joined:', peerId);
      const peers = Object.keys(state.room.getPeers());
      if (peers.length > 1) {
        statusEl.textContent = "Error: Too many players in room.";
        return;
      }
      state.opponentId = peerId;
      state.opponentConnected = true;
      if (state.gameStarted) {
        statusEl.textContent = state.myTurn ? "Status: Your turn!" : "Status: Opponent's turn...";
      } else {
        statusEl.textContent = "Status: Connected. Place ships...";
        if (state.ready) {
          state.sendReady({ type: "ready" });
        }
      }
      toggleConnectUI(false);
      state.save();
    });
    // Handle incoming data
    state.getReady((data, peerId) => {
      console.log('Received ready from:', peerId);
      state.opponentReady = true;
      statusEl.textContent = "Status: Opponent is ready!";
      if (state.ready) startGame();
      state.save();
    });
    state.getMove((data, peerId) => {
      console.log('Received move:', data);
      if (!state.gameStarted) return;
      handleMove(data.x, data.y);
    });
    state.getResult((data, peerId) => {
      console.log('Received result:', data);
      if (!state.gameStarted) return;
      handleResult(data);
    });
    state.getRematch((data, peerId) => {
      console.log('Received rematch request from:', peerId);
      state.opponentRematchReady = true;
      statusEl.textContent = "Opponent wants a rematch!";
      if (state.rematchReady) resetGame();
    });
    state.getChat((msg, peerId) => {
      console.log('Received chat:', msg);
      const chatLog = document.getElementById('chat-log');
      const p = document.createElement('p');
      p.textContent = `Opponent: ${msg}`;
      chatLog.appendChild(p);
      chatLog.scrollTop = chatLog.scrollHeight;
    });
    // Handle disconnects
    state.room.onPeerLeave(peerId => {
      state.opponentConnected = false;
      statusEl.textContent = "Status: Opponent disconnected. Waiting for reconnect...";
      console.log('Opponent left:', peerId);
      // Do not set gameStarted = false
      toggleConnectUI(true);
    });
    // Set my ID (Trystero's selfId)
    myIdEl.textContent = selfId;
    // Setup chat send
    const chatInput = document.getElementById('chat-input');
    const sendChatBtn = document.getElementById('send-chat');
    sendChatBtn.addEventListener('click', () => {
      if (!state.opponentConnected) return;
      const msg = chatInput.value.trim();
      if (msg && state.room) {
        state.sendChat(msg);
        const chatLog = document.getElementById('chat-log');
        const p = document.createElement('p');
        p.textContent = `You: ${msg}`;
        chatLog.appendChild(p);
        chatLog.scrollTop = chatLog.scrollHeight;
        chatInput.value = '';
      }
    });
    chatInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        sendChatBtn.click();
      }
    });
    // Update status after joining
    const peers = Object.keys(state.room.getPeers());
    const peersLength = peers.length;
    if (state.gameStarted) {
      if (peersLength === 1) {
        state.opponentConnected = true;
        state.opponentId = peers[0];
        statusEl.textContent = state.myTurn ? "Status: Your turn!" : "Status: Opponent's turn...";
        toggleConnectUI(false);
      } else {
        statusEl.textContent = "Status: Waiting for opponent to reconnect...";
        toggleConnectUI(true);
      }
    } else {
      if (peersLength === 1) {
        state.opponentConnected = true;
        state.opponentId = peers[0];
        statusEl.textContent = "Status: Connected. Place ships...";
        toggleConnectUI(false);
      } else {
        statusEl.textContent = "Status: Room joined. Waiting for opponent...";
        toggleConnectUI(true);
      }
      if (loaded) {
        selectNextShip(state, statusEl);
      }
    }
  });
  readyBtn.addEventListener("click", () => {
    if (!allShipsPlaced(state)) return;
    state.ready = true;
    readyBtn.disabled = true;
    if (state.room) {
      console.log('Sending ready');
      state.sendReady({ type: "ready" });
      statusEl.textContent = "Status: You are ready! Waiting for opponent...";
      state.save();
    } else {
      statusEl.textContent = "Status: Join a room first.";
      state.ready = false;
      readyBtn.disabled = false;
      return;
    }
    if (state.opponentReady) startGame();
  });
  rematchBtn.addEventListener("click", () => {
    state.rematchReady = true;
    rematchBtn.disabled = true;
    if (state.room) {
      console.log('Sending rematch');
      state.sendRematch({ type: "rematch" });
      statusEl.textContent = "Waiting for opponent to accept rematch...";
    } else {
      statusEl.textContent = "Status: Join a room first.";
      state.rematchReady = false;
      rematchBtn.disabled = false;
      return;
    }
    if (state.opponentRematchReady) resetGame();
  });
  // Auto-fill and join if ?room=xxx in URL
  const urlParams = new URLSearchParams(window.location.search);
  const roomParam = urlParams.get('room');
  if (roomParam) {
    opponentInput.value = roomParam;
    connectBtn.click(); // Auto-join
  }
  // Function to toggle connect UI
  const toggleConnectUI = (isDisconnected) => {
    if (isDisconnected) {
      connectBtn.textContent = 'Reconnect';
      connectBtn.style.display = 'inline-block';
      opponentInput.style.display = 'inline-block';
    } else {
      connectBtn.style.display = 'none';
      opponentInput.style.display = 'none';
    }
  };
  // Initial state: show as disconnected
  toggleConnectUI(true);
}



=== ./static/js/wordle.js ===
// ./static/js/wordle.js
const WORD_LENGTH = 5;
const MAX_GUESSES = 6;
let secretWord = '';
let currentGuess = [];
let guessCount = 0;
let gameOver = false;
let words = [];
let currentLanguage = 'en';

// Fetch word list for a specific language
async function loadWords(lang) {
  try {
    const response = await fetch(`/js/wordle-words-${lang}.txt`);
    const text = await response.text();
    words = text.split('\n').map(word => word.trim().toUpperCase()).filter(word => word.length === WORD_LENGTH);
    if (words.length === 0) {
      alert('Error loading word list for ' + lang);
    }
    resetGame();
  } catch (error) {
    console.error('Failed to load words for ' + lang + ':', error);
    alert('Error loading word list for ' + lang);
  }
}

// Pick a random secret word
function pickSecretWord() {
  const index = Math.floor(Math.random() * words.length);
  secretWord = words[index];
  console.log('Secret word (for debugging):', secretWord); // Remove in production
}

// Create the game board grid
function createBoard() {
  const board = document.getElementById('game-board');
  board.innerHTML = '';
  for (let i = 0; i < MAX_GUESSES; i++) {
    const row = document.createElement('div');
    row.classList.add('row');
    for (let j = 0; j < WORD_LENGTH; j++) {
      const tile = document.createElement('div');
      tile.classList.add('tile');
      row.appendChild(tile);
    }
    board.appendChild(row);
  }
}

// Create virtual keyboard
function createKeyboard() {
  const keyboard = document.getElementById('keyboard');
  keyboard.innerHTML = '';
  const keys = [
    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],
    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],
    ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', '⌫']
  ];
  keys.forEach((rowKeys, rowIndex) => {
    const row = document.createElement('div');
    row.classList.add('keyboard-row');
    if (rowIndex === 1) row.classList.add('second-row');
    rowKeys.forEach(key => {
      const btn = document.createElement('button');
      btn.textContent = key;
      btn.dataset.key = key;
      btn.classList.add('key');
      if (key === 'ENTER' || key === '⌫') {
        btn.classList.add('wide');
      }
      btn.addEventListener('click', () => handleKeyPress(key));
      row.appendChild(btn);
    });
    keyboard.appendChild(row);
  });
}

// Handle key presses (virtual or physical)
function handleKeyPress(key) {
  if (gameOver) return;
  key = key.toUpperCase();
  if (key === 'ENTER') {
    submitGuess();
  } else if (key === 'BACKSPACE' || key === '⌫') {
    currentGuess.pop();
    updateCurrentRow();
  } else if (key.length === 1 && /^[A-Z]$/.test(key) && currentGuess.length < WORD_LENGTH) {
    currentGuess.push(key);
    updateCurrentRow();
  }
}

// Update the current guess row on the board
function updateCurrentRow() {
  const row = document.querySelectorAll('.row')[guessCount];
  const tiles = row.querySelectorAll('.tile');
  tiles.forEach((tile, index) => {
    tile.textContent = currentGuess[index] || '';
    tile.classList.toggle('filled', !!currentGuess[index]);
  });
}

// Submit the guess and evaluate
async function submitGuess() {
  if (currentGuess.length !== WORD_LENGTH) {
    showMessage('Not enough letters');
    shakeRow();
    return;
  }
  const guessStr = currentGuess.join('');
  if (!words.includes(guessStr)) {
    showMessage('Not a valid word');
    shakeRow();
    return;
  }
  await evaluateGuess(guessStr);
  currentGuess = [];
  guessCount++;
  if (guessStr === secretWord) {
    showMessage('You win!', true);
    gameOver = true;
    showResetButton();
  } else if (guessCount === MAX_GUESSES) {
    showMessage(`You lose! The word was ${secretWord}`, true);
    gameOver = true;
    showResetButton();
  }
}

// Shake the current row for invalid input
function shakeRow() {
  const row = document.querySelectorAll('.row')[guessCount];
  row.classList.add('shake');
  setTimeout(() => row.classList.remove('shake'), 600);
}

// Evaluate guess and color tiles + keyboard (with sequential animation)
async function evaluateGuess(guess) {
  const row = document.querySelectorAll('.row')[guessCount];
  const tiles = row.querySelectorAll('.tile');
  const secretArray = secretWord.split('');
  const guessArray = guess.split('');
  const keyMap = {};
  const statuses = [];

  // Determine statuses
  guessArray.forEach((letter, i) => {
    if (letter === secretArray[i]) {
      statuses[i] = 'correct';
      keyMap[letter] = 'correct';
      secretArray[i] = null;
    } else {
      statuses[i] = 'absent'; // Default
    }
  });

  guessArray.forEach((letter, i) => {
    if (statuses[i] !== 'correct') {
      const index = secretArray.indexOf(letter);
      if (index !== -1) {
        statuses[i] = 'present';
        keyMap[letter] = keyMap[letter] || 'present';
        secretArray[index] = null;
      }
    }
  });

  // Animate flips sequentially
  for (let i = 0; i < tiles.length; i++) {
    tiles[i].classList.add('flip');
    setTimeout(() => {
      tiles[i].classList.add(statuses[i]);
    }, 250); // Apply color at midpoint of animation
    await new Promise(resolve => setTimeout(resolve, 250));
  }

  // Update keyboard colors
  Object.keys(keyMap).forEach(letter => {
    const keyBtn = document.querySelector(`.key[data-key="${letter}"]`);
    if (keyBtn && !keyBtn.classList.contains('correct')) {
      keyBtn.classList.add(keyMap[letter]);
    }
  });
}

// Show message
function showMessage(msg, persistent = false) {
  const messageEl = document.getElementById('message');
  messageEl.textContent = msg;
  if (msg.includes('win')) {
    messageEl.classList.add('win');
  } else if (msg.includes('lose')) {
    messageEl.classList.add('lose');
  } else {
    messageEl.classList.remove('win', 'lose');
  }
  if (!persistent) {
    setTimeout(() => {
      messageEl.textContent = '';
      messageEl.classList.remove('win', 'lose');
    }, 2000);
  }
}

// Show reset button
function showResetButton() {
  const resetBtn = document.getElementById('reset-btn');
  resetBtn.style.display = 'block';
}

// Reset game
function resetGame() {
  pickSecretWord();
  createBoard();
  createKeyboard();
  currentGuess = [];
  guessCount = 0;
  gameOver = false;
  document.getElementById('message').textContent = '';
  document.getElementById('message').classList.remove('win', 'lose');
  document.getElementById('reset-btn').style.display = 'none';
}

// Event listeners
document.addEventListener('keydown', (e) => handleKeyPress(e.key));
document.getElementById('reset-btn').addEventListener('click', resetGame);
const langSelect = document.getElementById('language-select');
langSelect.addEventListener('change', (e) => {
  currentLanguage = e.target.value;
  loadWords(currentLanguage);
});

// Init with default language
loadWords(currentLanguage);



=== ./static/js/ui.js ===
// ./static/js/ui.js
export function adjustStatusPosition(statusEl) {
  if (window.innerWidth <= 768) {
    const yourBoardDiv = document.querySelector('#boards > div:first-child');
    if (yourBoardDiv && !yourBoardDiv.nextSibling.isEqualNode(statusEl)) {
      yourBoardDiv.after(statusEl);
    }
  } else {
    const controlsDiv = document.querySelector('main > div:first-child');
    if (controlsDiv && !controlsDiv.nextSibling.isEqualNode(statusEl)) {
      controlsDiv.after(statusEl);
    }
  }
  adjustLayout();
}

export function adjustLayout() {
  const isMobile = window.innerWidth <= 768;
  const padding = document.querySelector('.targets-padding');
  if (padding) {
    padding.style.display = isMobile ? 'none' : 'block';
  }
  const targetsEl = document.getElementById('targets');
  if (targetsEl) {
    targetsEl.style.marginLeft = isMobile ? '0' : '40px';
    targetsEl.style.marginTop = isMobile ? '40px' : '0';
  }
}

export function createTargetsEl(shipSizes) {
  const targetsEl = document.createElement("div");
  targetsEl.id = "targets";
  targetsEl.style.width = "80px";
  shipSizes.forEach(group => {
    for (let i = 0; i < group.count; i++) {
      const rep = document.createElement("div");
      rep.classList.add("ship-rep");
      rep.dataset.size = group.size;
      for (let j = 0; j < group.size; j++) {
        const mini = document.createElement("div");
        mini.classList.add("mini-cell");
        rep.appendChild(mini);
      }
      targetsEl.appendChild(rep);
    }
  });
  return targetsEl;
}

export function wrapBoards(myBoardEl, opponentBoardEl, targetsEl) {
  const myContainer = myBoardEl.parentNode;
  const opponentContainer = opponentBoardEl.parentNode;
  const myBoardContainer = document.createElement("div");
  myBoardContainer.classList.add("board-container");
  myContainer.insertBefore(myBoardContainer, myBoardEl);
  myBoardContainer.appendChild(myBoardEl);
  const opponentBoardContainer = document.createElement("div");
  opponentBoardContainer.classList.add("board-container");
  opponentContainer.insertBefore(opponentBoardContainer, opponentBoardEl);
  opponentBoardContainer.appendChild(opponentBoardEl);
  opponentBoardContainer.appendChild(targetsEl);
  // Add padding to my board for balance
  const padding = document.createElement("div");
  padding.classList.add("targets-padding");
  padding.style.width = "120px";
  padding.style.flexShrink = "0";
  myBoardContainer.insertBefore(padding, myBoardEl);
}

export function addStyles() {
  const style = document.createElement("style");
  style.textContent = `
.board-container {
  display: flex;
  align-items: flex-start;
}
@media (max-width: 768px) {
  .board-container {
    flex-direction: column;
    align-items: center;
  }
}
.ship-rep {
  display: flex;
  margin-bottom: 10px;
}
.mini-cell {
  width: 20px;
  height: 20px;
  background: lightblue;
  border: 1px solid #1f3a5f;
  box-sizing: border-box;
  transition: background 0.15s;
}
.ship-rep.sunk .mini-cell {
  background: #dc2626;
  box-shadow: inset 0 0 6px #f87171;
}
.controls {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 0.5rem;
}
@media (max-width: 768px) {
  .controls {
    flex-direction: column;
    align-items: center;
  }
  .controls button, .controls input {
    width: 80%;
    margin: 0.3rem 0;
  }
}
.share-btn {
  padding: 10px 20px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
  transition: background-color 0.3s;
}
.share-btn:hover {
  background-color: #45a049;
}
.share-btn.copied {
  background-color: #2196F3;
  text-content: "Copied!";
}
.mute-btn {
  padding: 8px 16px;
  background-color: #f44336;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  transition: background-color 0.3s;
}
.mute-btn:hover {
  background-color: #d32f2f;
}
.mute-btn.muted {
  background-color: #4CAF50;
}
.mute-btn.muted:hover {
  background-color: #45a049;
}
`;
  document.head.appendChild(style);
}

export function createMuteBtn(controlsDiv, state) {
  const muteBtn = document.createElement("button");
  muteBtn.textContent = "Mute Sounds";
  muteBtn.classList.add("mute-btn");
  muteBtn.addEventListener("click", () => {
    state.isMuted = !state.isMuted;
    muteBtn.textContent = state.isMuted ? "Unmute Sounds" : "Mute Sounds";
    muteBtn.classList.toggle("muted", state.isMuted);
  });
  controlsDiv.appendChild(muteBtn);
}



=== ./static/js/board.js ===
// ./static/js/board.js
export function createBoard(el) {
  const grid = [];
  el.innerHTML = ""; // Clear existing cells
  for (let y = 0; y < 10; y++) {
    const row = [];
    for (let x = 0; x < 10; x++) {
      const cell = document.createElement("div");
      cell.classList.add("cell");
      cell.dataset.x = x;
      cell.dataset.y = y;
      el.appendChild(cell);
      row.push({ hasShip: false, hit: false, attacked: false, el: cell });
    }
    grid.push(row);
  }
  return grid;
}

export function addPlacementListeners(board, state) {
  board.flat().forEach(cell => {
    cell.el.addEventListener("click", state.placementClickHandler);
    cell.el.addEventListener("mouseover", state.previewHandler);
    cell.el.addEventListener("mouseout", state.clearHandler);
  });
}

export function addAttackListeners(board, state) {
  board.flat().forEach(cell => {
    cell.el.addEventListener("click", state.attackClickHandler);
  });
}

// Preview ship placement
export function previewShip(cell, state) {
  if (!state.currentShip || state.gameStarted) return;
  const x = parseInt(cell.dataset.x);
  const y = parseInt(cell.dataset.y);
  clearPreview();
  if (canPlaceShip(x, y, state.currentShip.size, state.orientation, state)) {
    highlightCells(x, y, state.currentShip.size, state.orientation, "preview", state);
  }
}

// Clear preview highlights
export function clearPreview() {
  document.querySelectorAll(".preview").forEach(el => el.classList.remove("preview"));
}

// Attempt to place ship on click
export function placeShipAttempt(cell, state, statusEl, readyBtn, resetBtn) {
  if (!state.currentShip || state.gameStarted) return;
  const x = parseInt(cell.dataset.x);
  const y = parseInt(cell.dataset.y);
  if (canPlaceShip(x, y, state.currentShip.size, state.orientation, state)) {
    placeShip(x, y, state.currentShip.size, state.orientation, state);
    state.currentShip.placed = true;
    selectNextShip(state, statusEl);
    if (allShipsPlaced(state)) {
      readyBtn.style.display = "block";
      resetBtn.style.display = "block";
      statusEl.textContent = "All ships placed! Click 'I'm Ready' when ready.";
    }
    state.save();
  }
}

// Check if ship can be placed (no overlap, in bounds, no adjacent ships)
export function canPlaceShip(startX, startY, size, orient, state) {
  // Check bounds and overlap
  for (let i = 0; i < size; i++) {
    const x = orient === "horizontal" ? startX + i : startX;
    const y = orient === "horizontal" ? startY : startY + i;
    if (x >= 10 || y >= 10 || state.myBoard[y][x].hasShip) {
      return false;
    }
  }
  // Check no adjacent ships (including diagonally)
  if (hasAdjacentShip(startX, startY, size, orient, state)) {
    return false;
  }
  return true;
}

// Check for adjacent ships
export function hasAdjacentShip(startX, startY, size, orient, state) {
  const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];
  for (let i = 0; i < size; i++) {
    const cx = orient === "horizontal" ? startX + i : startX;
    const cy = orient === "horizontal" ? startY : startY + i;
    for (let [dx, dy] of dirs) {
      const nx = cx + dx;
      const ny = cy + dy;
      if (nx >= 0 && nx < 10 && ny >= 0 && ny < 10 && state.myBoard[ny][nx].hasShip) {
        return true;
      }
    }
  }
  return false;
}

// Place the ship
export function placeShip(startX, startY, size, orient, state) {
  state.currentShip.positions = [];
  for (let i = 0; i < size; i++) {
    const x = orient === "horizontal" ? startX + i : startX;
    const y = orient === "horizontal" ? startY : startY + i;
    state.myBoard[y][x].hasShip = true;
    state.myBoard[y][x].el.classList.add("ship");
    state.currentShip.positions.push({ x, y });
  }
}

// Highlight cells for preview
export function highlightCells(startX, startY, size, orient, className, state) {
  for (let i = 0; i < size; i++) {
    const x = orient === "horizontal" ? startX + i : startX;
    const y = orient === "horizontal" ? startY : startY + i;
    if (x < 10 && y < 10) {
      state.myBoard[y][x].el.classList.add(className);
    }
  }
}

// Select next unplaced ship
export function selectNextShip(state, statusEl) {
  state.currentShip = state.shipsToPlace.find(ship => !ship.placed);
  if (state.currentShip) {
    statusEl.textContent = `Place ${state.currentShip.name} (${state.currentShip.size} cells)`;
  } else {
    statusEl.textContent = "All ships placed!";
  }
}

// Check if all ships are placed
export function allShipsPlaced(state) {
  return state.shipsToPlace.every(ship => ship.placed);
}

export function initBoard(myBoardEl, opponentBoardEl, state, statusEl, readyBtn, resetBtn, orientationBtn, rematchBtn) {
  state.myBoard = createBoard(myBoardEl);
  addPlacementListeners(state.myBoard, state);
  state.opponentBoard = createBoard(opponentBoardEl);
  addAttackListeners(state.opponentBoard, state);
  selectNextShip(state, statusEl);
  readyBtn.style.display = "none";
  resetBtn.style.display = "none";
  orientationBtn.style.display = "block";
  rematchBtn.style.display = "none";
}



=== ./static/js/wordle-words-en.txt ===
which
there
their
about
would
these
other
words
could
write
first
water
after
where
right
think
three
years
place
sound
great
again
still
every
small
found
those
never
under
might
while
house
world
below
asked
going
large
until
along
shall
being
often
earth
began
since
study
night
light
above
paper
parts
young
story
point
times
heard
whole
white
given
means
music
miles
thing
today
later
using
money
lines
order
group
among
learn
known
space
table
early
trees
short
hands
state
black
shown
stood
front
voice
kinds
makes
comes
close
power
lived
vowel
taken
built
heart
ready
quite
class
bring
round
horse
shows
piece
green
stand
birds
start
river
tried
least
field
whose
girls
leave
added
color
third
hours
moved
plant
doing
names
forms
heavy
ideas
cried
check
floor
begin
woman
alone
plane
spell
watch
carry
wrote
clear
named
books
child
glass
human
takes
party
build
seems
blood
sides
seven
mouth
solve
north
value
death
maybe
happy
tells
gives
looks
shape
lives
steps
areas
sense
speak
force
ocean
speed
women
metal
south
grass
scale
cells
lower
sleep
wrong
pages
ships
needs
rocks
eight
major
level
total
ahead
reach
stars
store
sight
terms
catch
works
board
cover
songs
equal
stone
waves
guess
dance
spoke
break
cause
radio
weeks
lands
basic
liked
trade
fresh
final
fight
meant
drive
spent
local
waxes
knows
train
bread
homes
teeth
coast
thick
brown
clean
quiet
sugar
facts
steel
forth
rules
notes
units
peace
month
verbs
seeds
helps
sharp
visit
woods
chief
walls
cross
wings
grown
cases
foods
crops
fruit
stick
wants
stage
sheep
nouns
plain
drink
bones
apart
turns
moves
touch
angle
based
range
marks
tired
older
farms
spend
shoes
goods
chair
twice
cents
empty
alike
style
broke
pairs
count
enjoy
score
shore
roots
paint
heads
shook
serve
angry
crowd
wheel
quick
dress
share
alive
noise
solid
cloth
signs
hills
types
drawn
worth
truck
piano
upper
loved
usual
faces
drove
cabin
boats
towns
proud
court
model
prime
fifty
plans
yards
prove
tools
price
sheet
smell
boxes
raise
match
truth
roads
threw
enemy
lunch
chart
scene
graph
doubt
guide
winds
block
grain
smoke
mixed
games
wagon
sweet
topic
extra
plate
title
knife
fence
falls
cloud
wheat
plays
enter
broad
steam
atoms
press
lying
basis
clock
taste
grows
thank
storm
agree
brain
track
smile
funny
beach
stock
hurry
saved
sorry
giant
trail
offer
ought
rough
daily
avoid
keeps
throw
allow
cream
laugh
edges
teach
frame
bells
dream
magic
occur
ended
chord
false
skill
holes
dozen
brave
apple
climb
outer
pitch
ruler
holds
fixed
costs
calls
blank
staff
labor
eaten
youth
tones
honor
globe
gases
doors
poles
loose
apply
tears
exact
brush
chest
layer
whale
minor
faith
tests
judge
items
worry
waste
hoped
strip
begun
aside
lakes
bound
depth
candy
event
worse
aware
shell
rooms
ranch
image
snake
aloud
dried
likes
motor
pound
knees
refer
fully
chain
shirt
flour
drops
spite
orbit
banks
shoot
curve
tribe
tight
blind
slept
shade
claim
flies
theme
queen
fifth
union
hence
straw
entry
issue
birth
feels
anger
brief
rhyme
glory
guard
flows
flesh
owned
trick
yours
sizes
noted
width
burst
route
lungs
uncle
bears
royal
kings
forty
trial
cards
brass
opera
chose
owner
vapor
beats
mouse
tough
wires
meter
tower
finds
inner
stuck
arrow
poems
label
swing
solar
truly
tense
beans
split
rises
weigh
hotel
stems
pride
swung
grade
digit
badly
boots
pilot
sales
swept
lucky
prize
stove
tubes
acres
wound
steep
slide
trunk
error
porch
slave
exist
faced
mines
marry
juice
raced
waved
goose
trust
fewer
favor
mills
views
joint
eager
spots
blend
rings
adult
index
nails
horns
balls
flame
rates
drill
trace
skins
waxed
seats
stuff
ratio
minds
dirty
silly
coins
hello
trips
leads
rifle
hopes
bases
shine
bench
moral
fires
meals
shake
shops
cycle
movie
slope
canoe
teams
folks
fired
bands
thumb
shout
canal
habit
reply
ruled
fever
crust
shelf
walks
midst
crack
print
tales
coach
stiff
flood
verse
awake
rocky
march
fault
swift
faint
civil
ghost
feast
blade
limit
germs
reads
ducks
dairy
worst
gifts
lists
stops
rapid
brick
claws
beads
beast
skirt
cakes
lions
frogs
tries
nerve
grand
armed
treat
honey
moist
legal
penny
crown
shock
taxes
sixty
altar
pulls
sport
drums
talks
dying
dates
drank
blows
lever
wages
proof
drugs
tanks
sings
tails
pause
herds
arose
hated
clues
novel
shame
burnt
races
flash
weary
heels
token
coats
spare
shiny
alarm
dimes
sixth
clerk
mercy
sunny
guest
float
shone
pipes
worms
bills
sweat
suits
smart
upset
rains
sandy
rainy
parks
sadly
fancy
rider
unity
bunch
rolls
crash
craft
newly
gates
hatch
paths
funds
wider
grace
grave
tides
admit
shift
sails
pupil
tiger
angel
cruel
agent
drama
urged
patch
nests
vital
sword
blame
weeds
screw
vocal
bacon
chalk
cargo
crazy
acted
goats
arise
witch
loves
queer
dwell
backs
ropes
shots
merry
phone
cheek
peaks
ideal
beard
eagle
creek
cries
ashes
stall
yield
mayor
opens
input
fleet
tooth
cubic
wives
burns
poets
apron
spear
organ
cliff
stamp
paste
rural
baked
chase
slice
slant
knock
noisy
sorts
stays
wiped
blown
piled
clubs
cheer
widow
twist
tenth
hides
comma
sweep
spoon
stern
crept
maple
deeds
rides
muddy
crime
jelly
ridge
drift
dusty
devil
tempo
humor
sends
steal
tents
waist
roses
reign
noble
cheap
dense
linen
geese
woven
posts
hired
wrath
salad
bowed
tires
shark
belts
grasp
blast
polar
fungi
tends
pearl
loads
jokes
veins
frost
hears
loses
hosts
diver
phase
toads
alert
tasks
seams
coral
focus
naked
puppy
jumps
spoil
quart
macro
fears
flung
spark
vivid
brook
steer
spray
decay
ports
socks
urban
goals
grant
minus
films
tunes
shaft
firms
skies
bride
wreck
flock
stare
hobby
bonds
dared
faded
thief
crude
pants
flute
votes
tonal
radar
wells
skull
hairs
argue
wears
dolls
voted
caves
cared
broom
scent
panel
fairy
olive
bends
prism
lamps
cable
peach
ruins
rally
schwa
lambs
sells
cools
draft
charm
limbs
brake
gazed
cubes
delay
beams
fetch
ranks
array
harsh
camel
vines
picks
naval
purse
rigid
crawl
toast
soils
sauce
basin
ponds
twins
wrist
fluid
pools
brand
stalk
robot
reeds
hoofs
buses
sheer
grief
bloom
dwelt
melts
risen
flags
knelt
fiber
roofs
freed
armor
piles
aimed
algae
twigs
lemon
ditch
drunk
rests
chill
slain
panic
cords
tuned
crisp
ledge
dived
swamp
clung
stole
molds
yarns
liver
gauge
breed
stool
gulls
awoke
gross
diary
rails
belly
trend
flask
stake
fried
draws
actor
handy
bowls
haste
scope
deals
knots
moons
essay
thump
hangs
bliss
dealt
gains
bombs
clown
palms
cones
roast
tidal
bored
chant
acids
dough
camps
swore
lover
hooks
males
cocoa
punch
award
reins
ninth
noses
links
drain
fills
nylon
lunar
pulse
flown
elbow
fatal
sites
moths
meats
foxes
mined
attic
fiery
mount
usage
swear
snowy
rusty
scare
traps
relax
react
valid
robin
cease
gills
prior
safer
polio
loyal
swell
salty
marsh
vague
weave
mound
seals
mules
virus
scout
acute
windy
stout
folds
seize
hilly
joins
pluck
stack
lords
dunes
burro
hawks
trout
feeds
scarf
halls
coals
towel
souls
elect
buggy
pumps
loans
spins
files
oxide
pains
photo
rival
flats
syrup
rodeo
sands
moose
pints
curly
comic
cloak
onion
clams
scrap
didst
couch
codes
fails
ounce
lodge
greet
gypsy
utter
paved
zones
fours
alley
tiles
bless
crest
elder
kills
yeast
erect
bugle
medal
roles
hound
snail
alter
ankle
relay
loops
zeros
bites
modes
debts
realm
glove
rayon
swims
poked
stray
lifts
maker
lumps
graze
dread
barns
docks
masts
pours
wharf
curse
plump
robes
seeks
cedar
curls
jolly
myths
cages
gloom
locks
pedal
beets
crows
anode
slash
creep
rowed
chips
fists
wines
cares
valve
newer
motel
ivory
necks
clamp
barge
blues
alien
frown
strap
crews
shack
gonna
saves
stump
ferry
idols
cooks
juicy
glare
carts
alloy
bulbs
lawns
lasts
fuels
oddly
crane
filed
weird
shawl
slips
troop
bolts
suite
sleek
quilt
tramp
blaze
atlas
odors
scrub
crabs
probe
logic
adobe
exile
rebel
grind
sting
spine
cling
desks
grove
leaps
prose
lofty
agony
snare
tusks
bulls
moods
humid
finer
dimly
plank
china
pines
guilt
sacks
brace
quote
lathe
gaily
fonts
scalp
adopt
foggy
ferns
grams
clump
perch
tumor
teens
crank
fable
hedge
genes
sober
boast
tract
cigar
unite
owing
thigh
haiku
swish
dikes
wedge
booth
eased
frail
cough
tombs
darts
forts
choir
pouch
pinch
hairy
buyer
torch
vigor
waltz
heats
herbs
users
flint
click
madam
bleak
blunt
aided
lacks
masks
waded
risks
nurse
chaos
sewed
cured
ample
lease
steak
sinks
merit
bluff
bathe
gleam
bonus
colts
shear
gland
silky
skate
birch
anvil
sleds
groan
maids
meets
speck
hymns
hints
drown
bosom
slick
quest
coils
spied
snows
stead
snack
plows
blond
tamed
thorn
waits
glued
banjo
tease
arena
bulky
carve
stunt
warms
shady
razor
folly
leafy
notch
fools
otter
pears
flush
genus
ached
fives
flaps
spout
smote
fumes
adapt
cuffs
tasty
stoop
clips
disks
sniff
lanes
brisk
imply
demon
super
furry
raged
growl
texts
hardy
stung
typed
hates
wiser
timid
serum
beaks
rotor
casts
baths
glide
plots
trait
resin
slums
lyric
puffs
decks
brood
mourn
aloft
abuse
whirl
edged
ovary
quack
heaps
slang
await
civic
saint
bevel
sonar
aunts
packs
froze
tonic
corps
swarm
frank
repay
gaunt
wired
niece
cello
needy
chuck
stony
media
surge
hurts
repel
husky
dated
hunts
mists
exert
dries
mates
sworn
baker
spice
oasis
boils
spurs
doves
sneak
paces
colon
siege
strum
drier
cacao
humus
bales
piped
nasty
rinse
boxer
shrub
amuse
tacks
cited
slung
delta
laden
larva
rents
yells
spool
spill
crush
jewel
snaps
stain
kicks
tying
slits
rated
eerie
smash
plums
zebra
earns
bushy
scary
squad
tutor
silks
slabs
bumps
evils
fangs
snout
peril
pivot
yacht
lobby
jeans
grins
viola
liner
comet
scars
chops
raids
eater
slate
skips
soles
misty
urine
knobs
sleet
holly
pests
forks
grill
trays
pails
borne
tenor
wares
carol
woody
canon
wakes
kitty
miner
polls
shaky
nasal
scorn
chess
taxis
crate
shyly
tulip
forge
nymph
budge
lowly
abide
depot
oases
asses
sheds
fudge
pills
rivet
thine
groom
lanky
boost
broth
heave
gravy
beech
timed
quail
inert
gears
chick
hinge
trash
clash
sighs
renew
bough
dwarf
slows
quill
shave
spore
sixes
chunk
madly
paced
braid
fuzzy
motto
spies
slack
mucus
magma
awful
discs
erase
posed
asset
cider
taper
theft
churn
satin
slots
taxed
bully
sloth
shale
tread
raked
curds
manor
aisle
bulge
loins
stair
tapes
leans
bunks
squat
towed
lance
panes
sakes
heirs
caste
dummy
pores
fauna
crook
poise
epoch
risky
warns
fling
berry
grape
flank
drags
squid
pelts
icing
irony
irons
barks
whoop
choke
diets
whips
tally
dozed
twine
kites
bikes
ticks
riots
roars
vault
looms
scold
blink
dandy
pupae
sieve
spike
ducts
lends
pizza
brink
widen
plumb
pagan
feats
bison
soggy
scoop
argon
nudge
skiff
amber
sexes
rouse
salts
hitch
exalt
leash
dined
chute
snort
gusts
melon
cheat
reefs
llama
lasso
debut
quota
oaths
prone
mixes
rafts
dives
stale
inlet
flick
pinto
brows
untie
batch
greed
chore
stirs
blush
onset
barbs
volts
beige
swoop
paddy
laced
shove
jerky
poppy
leaks
fares
dodge
godly
squaw
affix
brute
nicer
undue
snarl
merge
doses
showy
daddy
roost
vases
swirl
petty
colds
curry
cobra
genie
flare
messy
cores
soaks
ripen
whine
amino
plaid
spiny
mowed
baton
peers
vowed
pious
swans
exits
afoot
plugs
idiom
chili
rites
serfs
cleft
berth
grubs
annex
dizzy
hasty
latch
wasps
mirth
baron
plead
aloof
aging
pixel
bared
mummy
hotly
auger
buddy
chaps
badge
stark
fairs
gully
mumps
emery
filly
ovens
drone
gauze
idiot
fussy
annoy
shank
gouge
bleed
elves
roped
unfit
baggy
mower
scant
grabs
fleas
lousy
album
sawed
cooky
murky
infer
burly
waged
dingy
brine
kneel
creak
vanes
smoky
spurt
combs
easel
laces
humps
rumor
aroma
horde
swiss
leapt
opium
slime
afire
pansy
mares
soaps
husks
snips
hazel
lined
cafes
naive
wraps
sized
piers
beset
agile
tongs
steed
fraud
booty
valor
downy
witty
mossy
psalm
scuba
tours
polka
milky
gaudy
shrug
tufts
wilds
laser
truss
hares
creed
lilac
siren
tarry
bribe
swine
muted
flips
cures
sinew
boxed
hoops
gasps
hoods
niche
yucca
glows
sewer
whack
fuses
gowns
droop
bucks
pangs
mails
whisk
haven
clasp
sling
stint
urges
champ
piety
chirp
pleat
posse
sunup
menus
howls
quake
knack
plaza
fiend
caked
bangs
erupt
poker
olden
cramp
voter
poses
manly
slump
fined
grips
gaped
purge
hiked
maize
fluff
strut
sloop
prowl
roach
cocks
bland
dials
plume
slaps
soups
dully
wills
foams
solos
skier
eaves
totem
fused
latex
veils
mused
mains
myrrh
racks
galls
gnats
bouts
sisal
shuts
hoses
dryly
hover
gloss
seeps
denim
putty
guppy
leaky
dusky
filth
oboes
spans
fowls
adorn
glaze
haunt
dares
obeys
bakes
abyss
smelt
gangs
aches
trawl
claps
undid
spicy
hoist
fades
vicar
acorn
pussy
gruff
musty
tarts
snuff
hunch
truce
tweed
dryer
loser
sheaf
moles
lapse
tawny
vexed
autos
wager
domes
sheen
clang
spade
sowed
broil
slyly
studs
grunt
donor
slugs
aspen
homer
croak
tithe
halts
avert
havoc
hogan
glint
ruddy
jeeps
flaky
ladle
taunt
snore
fines
props
prune
pesos
radii
pokes
tiled
daisy
heron
villa
farce
binds
cites
fixes
jerks
livid
waked
inked
booms
chews
licks
hyena
scoff
lusty
sonic
smith
usher
tucks
vigil
molts
sects
spars
dumps
scaly
wisps
sores
mince
panda
flier
axles
plied
booby
patio
rabbi
petal
polyp
tints
grate
troll
tolls
relic
phony
bleat
flaws
flake
snags
aptly
drawl
ulcer
soapy
bossy
monks
crags
caged
twang
diner
taped
cadet
grids
spawn
guile
noose
mores
girth
slimy
aides
spasm
burrs
alibi
lymph
saucy
muggy
liter
joked
goofy
exams
enact
stork
lured
toxic
omens
nears
covet
wrung
forum
venom
moody
alder
sassy
flair
guild
prays
wrens
hauls
stave
tilts
pecks
stomp
gales
tempt
capes
mesas
omits
tepee
harry
wring
evoke
limes
cluck
lunge
highs
canes
giddy
lithe
verge
khaki
queue
loath
foyer
outdo
fared
deter
crumb
astir
spire
jumpy
extol
buoys
stubs
lucid
thong
afore
whiff
maxim
hulls
clogs
slats
jiffy
arbor
cinch
igloo
goody
gazes
dowel
calms
bitch
scowl
gulps
coded
waver
mason
lobes
ebony
flail
isles
clods
dazed
adept
oozed
sedan
clays
warts
ketch
skunk
manes
adore
sneer
mango
fiord
flora
roomy
minks
thaws
watts
freer
exult
plush
paled
twain
clink
scamp
pawed
grope
bravo
gable
stink
sever
waned
rarer
regal
wards
fawns
babes
unify
amend
oaken
glade
visor
hefty
nines
throb
pecan
butts
pence
sills
jails
flyer
saber
nomad
miter
beeps
domed
gulfs
curbs
heath
moors
aorta
larks
tangy
wryly
cheep
rages
evade
lures
freak
vogue
tunic
slams
knits
dumpy
mania
spits
firth
hikes
trots
nosed
clank
dogma
bloat
balsa
graft
middy
stile
keyed
finch
sperm
chaff
wiles
amigo
copra
amiss
eying
twirl
lurch
popes
chins
smock
tines
guise
grits
junks
shoal
cache
tapir
atoll
deity
toils
spree
mocks
scans
shorn
revel
raven
hoary
reels
scuff
mimic
weedy
corny
truer
rouge
ember
floes
torso
wipes
edict
sulky
recur
groin
baste
kinks
surer
piggy
moldy
franc
liars
inept
gusty
facet
jetty
equip
leper
slink
soars
cater
dowry
sided
yearn
decoy
taboo
ovals
heals
pleas
beret
spilt
gayly
rover
endow
pygmy
carat
abbey
vents
waken
chimp
fumed
sodas
vinyl
clout
wades
mites
smirk
bores
bunny
surly
frock
foray
purer
milks
query
mired
blare
froth
gruel
navel
paler
puffy
casks
grime
derby
mamma
gavel
teddy
vomit
moans
allot
defer
wield
viper
louse
erred
hewed
abhor
wrest
waxen
adage
ardor
stabs
pored
rondo
loped
fishy
bible
hires
foals
feuds
jambs
thuds
jeers
knead
quirk
rugby
expel
greys
rigor
ester
lyres
aback
glues
lotus
lurid
rungs
hutch
thyme
valet
tommy
yokes
epics
trill
pikes
ozone
caper
chime
frees
famed
leech
smite
neigh
erode
robed
hoard
salve
conic
gawky
craze
jacks
gloat
mushy
rumps
fetus
wince
pinks
shalt
toots
glens
cooed
rusts
stews
shred
parka
chugs
winks
clots
shrew
booed
filmy
juror
dents
gummy
grays
hooky
butte
dogie
poled
reams
fifes
spank
gayer
tepid
spook
taint
flirt
rogue
spiky
opals
miser
cocky
coyly
balmy
slosh
brawl
aphid
faked
hydra
brags
chide
yanks
allay
video
altos
eases
meted
chasm
longs
excel
taffy
impel
savor
koala
quays
dawns
proxy
clove
duets
dregs
tardy
briar
grimy
ultra
meaty
halve
wails
suede
mauve
envoy
arson
coves
gooey
brews
sofas
chums
amaze
zooms
abbot
halos
scour
suing
cribs
sagas
enema
wordy
harps
coupe
molar
flops
weeps
mints
ashen
felts
askew
munch
mewed
divan
vices
jumbo
blobs
blots
spunk
acrid
topaz
cubed
clans
flees
slurs
gnaws
welds
fords
emits
agate
pumas
mends
darks
dukes
plies
canny
hoots
oozes
lamed
fouls
clefs
nicks
mated
skims
brunt
tuber
tinge
fates
ditty
thins
frets
eider
bayou
mulch
fasts
amass
damps
morns
friar
palsy
vista
croon
conch
udder
tacos
skits
mikes
quits
preen
aster
adder
elegy
pulpy
scows
baled
hovel
lavas
crave
optic
welts
busts
knave
razed
shins
totes
scoot
dears
crock
mutes
trims
skein
doted
shuns
veers
fakes
yoked
wooed
hacks
sprig
wands
lulls
seers
snobs
nooks
pined
perky
mooed
frill
dines
booze
tripe
prong
drips
odder
levee
antic
sidle
pithy
corks
yelps
joker
fleck
buffs
scram
tiers
bogey
doled
irate
vales
coped
hails
elude
bulks
aired
vying
stags
strew
cocci
pacts
scabs
silos
dusts
yodel
terse
jaded
baser
jibes
foils
sways
forgo
slays
preys
treks
quell
peeks
assay
lurks
eject
boars
trite
belch
gnash
wanes
lutes
whims
dosed
chewy
snipe
umbra
teems
dozes
kelps
upped
brawn
doped
shush
rinds
slush
moron
voile
woken
fjord
sheik
jests
kayak
slews
toted
saner
drape
patty
raves
sulfa
grist
skied
vixen
civet
vouch
tiara
homey
moped
runts
serge
kinky
rills
corns
brats
pries
amble
fries
loons
tsars
datum
musky
pigmy
gnome
ravel
ovule
icily
liken
lemur
frays
silts
sifts
plods
ramps
tress
earls
dudes
waive
karat
jolts
peons
beers
horny
pales
wreak
lairs
lynch
stank
swoon
idler
abort
blitz
ensue
atone
bingo
roves
kilts
scald
adios
cynic
dulls
memos
elfin
dales
peels
peals
bares
sinus
crone
sable
hinds
shirk
enrol
wilts
roams
duped
cysts
mitts
safes
spats
coops
filet
knell
refit
covey
punks
kilns
fitly
abate
talcs
heeds
duels
wanly
ruffs
gauss
lapel
jaunt
whelp
cleat
gauzy
dirge
edits
wormy
moats
smear
prods
bowel
frisk
vests
bayed
rasps
tames
delve
embed
befit
wafer
ceded
novas
feign
spews
larch
huffs
doles
mamas
hulks
pried
brims
irked
aspic
swipe
mealy
skimp
bluer
slake
dowdy
penis
brays
pupas
egret
flunk
phlox
gripe
peony
douse
blurs
darns
slunk
lefts
chats
inane
vials
stilt
rinks
woofs
wowed
bongs
frond
ingot
evict
singe
shyer
flied
slops
dolts
drool
dells
whelk
hippy
feted
ether
cocos
hives
jibed
mazes
trios
sirup
squab
laths
leers
pasta
rifts
lopes
alias
whirs
diced
slags
lodes
foxed
idled
prows
plait
malts
chafe
cower
toyed
chefs
keels
sties
racer
etude
sucks
sulks
micas
czars
copse
ailed
abler
rabid
golds
croup
snaky
visas
palls
mopes
boned
wispy
raved
swaps
junky
doily
pawns
tamer
poach
baits
damns
gumbo
daunt
prank
hunks
buxom
heres
honks
stows
unbar
idles
routs
sages
goads
remit
copes
deign
culls
girds
haves
lucks
stunk
dodos
shams
snubs
icons
usurp
dooms
hells
soled
comas
paves
maths
perks
limps
wombs
blurb
daubs
cokes
sours
stuns
cased
musts
coeds
cowed
aping
zoned
rummy
fetes
skulk
quaff
rajah
deans
reaps
galas
tills
roved
kudos
toned
pared
scull
vexes
punts
snoop
bails
dames
hazes
lores
marts
voids
ameba
rakes
adzes
harms
rears
satyr
swill
hexes
colic
leeks
hurls
yowls
ivies
plops
musks
papaw
jells
bused
cruet
bided
filch
zests
rooks
laxly
rends
loams
basks
sires
carps
pokey
flits
muses
bawls
shuck
viler
lisps
peeps
sorer
lolls
prude
diked
floss
flogs
scums
dopes
bogie
pinky
leafs
tubas
scads
lowed
yeses
biked
qualm
evens
caned
gawks
whits
wooly
gluts
romps
bests
dunce
crony
joist
tunas
boner
malls
parch
avers
crams
pares
dally
bigot
kales
flays
leach
gushy
pooch
huger
slyer
golfs
mires
flues
loafs
arced
acnes
neons
fiefs
dints
dazes
pouts
cored
yules
lilts
beefs
mutts
fells
cowls
spuds
lames
jawed
dupes
deads
bylaw
noons
nifty
clued
vireo
gapes
metes
cuter
maims
droll
cupid
mauls
sedge
papas
wheys
eking
loots
hilts
meows
beaus
dices
peppy
riper
fogey
gists
yogas
gilts
skews
cedes
zeals
alums
okays
elope
grump
wafts
soots
blimp
hefts
mulls
hosed
cress
doffs
ruder
pixie
waifs
ousts
pucks
biers
gulch
suets
hobos
lints
brans
teals
garbs
pewee
helms
turfs
quips
wends
banes
napes
icier
swats
bagel
hexed
ogres
goner
gilds
pyres
lards
bides
paged
talon
flout
medic
veals
putts
dirks
dotes
tippy
blurt
piths
acing
barer
whets
gaits
wools
dunks
heros
swabs
dirts
jutes
hemps
surfs
okapi
chows
shoos
dusks
parry
decal
furls
cilia
sears
novae
murks
warps
slues
lamer
saris
weans
purrs
dills
togas
newts
meany
bunts
razes
goons
wicks
ruses
vends
geode
drake
judos
lofts
pulps
lauds
mucks
vises
mocha
oiled
roman
ethyl
gotta
fugue
smack
gourd
bumpy
radix
fatty
borax
cubit
cacti
gamma
focal
avail
papal
golly
elite
versa
billy
adieu
annum
howdy
rhino
norms
bobby
axiom
setup
yolks
terns
mixer
genre
knoll
abode
junta
gorge
combo
alpha
overt
kinda
spelt
prick
nobly
ephod
audio
modal
veldt
warty
fluke
bonny
bream
rosin
bolls
doers
downs
beady
motif
humph
fella
mould
crepe
kerns
aloha
glyph
azure
riser
blest
locus
lumpy
beryl
wanna
brier
tuner
rowdy
mural
timer
canst
krill
quoth
lemme
triad
tenon
amply
deeps
padre
leant
pacer
octal
dolly
trans
sumac
foamy
lolly
giver
quipu
codex
manna
unwed
vodka
ferny
salon
duple
boron
revue
crier
alack
inter
dilly
whist
cults
spake
reset
loess
decor
mover
verve
ethic
gamut
lingo
dunno
align
sissy
incur
reedy
avant
piper
waxer
calyx
basil
coons
seine
piney
lemma
trams
winch
whirr
saith
ionic
heady
harem
tummy
sally
shied
dross
farad
saver
tilde
jingo
bower
serif
facto
belle
inset
bogus
caved
forte
sooty
bongo
toves
credo
basal
yella
aglow
glean
gusto
hymen
ethos
terra
brash
scrip
swash
aleph
tinny
itchy
wanta
trice
jowls
gongs
garde
boric
twill
sower
henry
awash
libel
spurn
sabre
rebut
penal
obese
sonny
quirt
mebbe
tacit
greek
xenon
hullo
pique
roger
negro
hadst
gecko
beget
uncut
aloes
louis
quint
clunk
raped
salvo
diode
matey
hertz
xylem
kiosk
apace
cawed
peter
wench
cohos
sorta
gamba
bytes
tango
nutty
axial
aleck
natal
clomp
gored
siree
bandy
gunny
runic
whizz
rupee
fated
wiper
bards
briny
staid
hocks
ochre
yummy
gents
soupy
roper
swath
cameo
edger
spate
gimme
ebbed
breve
theta
deems
dykes
servo
telly
tabby
tares
blocs
welch
ghoul
vitae
cumin
dinky
bronc
tabor
teeny
comer
borer
sired
privy
mammy
deary
gyros
sprit
conga
quire
thugs
furor
bloke
runes
bawdy
cadre
toxin
annul
egged
anion
nodes
picky
stein
jello
audit
echos
fagot
letup
eyrie
fount
caped
axons
amuck
banal
riled
petit
umber
miler
fibre
agave
bated
bilge
vitro
feint
pudgy
mater
manic
umped
pesky
strep
slurp
pylon
puree
caret
temps
newel
yawns
seedy
treed
coups
rangy
brads
mangy
loner
circa
tibia
afoul
mommy
titer
carne
kooky
motes
amity
suave
hippo
curvy
samba
newsy
anise
imams
tulle
aways
liven
hallo
wales
opted
canto
idyll
bodes
curio
wrack
hiker
chive
yokel
dotty
demur
cusps
specs
quads
laity
toner
decry
writs
saute
clack
aught
logos
tipsy
natty
ducal
bidet
bulgy
metre
lusts
unary
goeth
baler
sited
shies
hasps
brung
holed
swank
looky
melee
huffy
loamy
pimps
titan
binge
shunt
femur
libra
seder
honed
annas
coypu
shims
zowie
jihad
savvy
nadir
basso
monic
maned
mousy
omega
laver
prima
picas
folio
mecca
reals
troth
testy
balky
crimp
chink
abets
splat
abaci
vaunt
cutie
pasty
moray
levis
ratty
islet
joust
motet
viral
nukes
grads
comfy
voila
woozy
blued
whomp
sward
metro
skeet
chine
aerie
bowie
tubby
emirs
coati
unzip
slobs
trike
funky
ducat
dewey
skoal
wadis
oomph
taker
minim
getup
stoic
synod
runty
flyby
braze
inlay
venue
louts
peaty
orlon
humpy
radon
beaut
raspy
unfed
crick
nappy
vizor
yipes
rebus
divot
kiwis
vetch
squib
sitar
kiddo
dyers
cotta
matzo
lager
zebus
crass
dacha
kneed
dicta
fakir
knurl
runny
unpin
julep
globs
nudes
sushi
tacky
stoke
kaput
butch
hulas
croft
achoo
genii
nodal
outgo
spiel
viols
fetid
cagey
fudgy
epoxy
leggy
hanky
lapis
felon
beefy
coots
melba
caddy
segue
betel
frizz
drear
kooks
turbo
hoagy
moult
helix
zonal
arias
nosey
paean
lacey
banns
swain
fryer
retch
tenet
gigas
whiny
ogled
rumen
begot
cruse
abuts
riven
balks
sines
sigma
abase
ennui
gores
unset
augur
sated
odium
latin
dings
moire
scion
henna
kraut
dicks
lifer
prigs
bebop
gages
gazer
fanny
gibes
aural
tempi
hooch
rapes
snuck
harts
techs
emend
ninny
guava
scarp
liege
tufty
sepia
tomes
carob
emcee
prams
poser
verso
hubba
joule
baize
blips
scrim
cubby
clave
winos
rearm
liens
lumen
chump
nanny
trump
fichu
chomp
homos
purty
maser
woosh
patsy
shill
rusks
avast
swami
boded
ahhhh
lobed
natch
shish
tansy
snoot
payer
altho
sappy
laxer
hubby
aegis
riles
ditto
jazzy
dingo
quasi
septa
peaky
lorry
heerd
bitty
payee
seamy
apses
imbue
belie
chary
spoof
phyla
clime
babel
wacky
sumps
skids
khans
crypt
inure
nonce
outen
faire
hooey
anole
kazoo
calve
limbo
argot
ducky
faker
vibes
gassy
unlit
nervy
femme
biter
fiche
boors
gaffe
saxes
recap
synch
facie
dicey
ouija
hewer
legit
gurus
edify
tweak
caron
typos
rerun
polly
surds
hamza
nulls
hater
lefty
mogul
mafia
debug
pates
blabs
splay
talus
porno
moola
nixed
kilos
snide
horsy
gesso
jaggy
trove
nixes
creel
pater
iotas
cadge
skyed
hokum
furze
ankhs
curie
nutsy
hilum
remix
angst
burls
jimmy
veiny
tryst
codon
befog
gamed
flume
axman
doozy
lubes
rheas
bozos
butyl
kelly
mynah
jocks
donut
avian
wurst
chock
quash
quals
hayed
bombe
cushy
spacy
puked
leery
thews
prink
amens
tesla
intro
fiver
frump
capos
opine
coder
namer
jowly
pukes
haled
chard
duffs
bruin
reuse
whang
toons
frats
silty
telex
cutup
nisei
neato
decaf
softy
bimbo
adlib
loony
shoed
agues
peeve
noway
gamey
sarge
reran
epact
potty
coned
upend
narco
ikats
whorl
jinks
tizzy
weepy
posit
marge
vegan
clops
numbs
reeks
rubes
rower
biped
tiffs
hocus
hammy
bunco
fixit
tykes
chaws
yucky
hokey
resew
maven
adman
scuzz
slogs
souse
nacho
mimed
melds
boffo
debit
pinup
vagus
gulag
randy
bosun
educe
faxes
auras
pesto
antsy
betas
fizzy
dorky
snits
moxie
thane
mylar
nobby
gamin
gouty
esses
goyim
paned
druid
jades
rehab
gofer
tzars
octet
homed
socko
dorks
eared
anted
elide
fazes
oxbow
dowse
situs
macaw
scone
drily
hyper
salsa
mooch
gated
unjam
lipid
mitre
venal
knish
ritzy
divas
torus
mange
dimer
recut
meson
wined
fends
phage
fiats
caulk
cavil
panty
roans
bilks
hones
botch
estop
sully
sooth
gelds
ahold
raper
pager
fixer
infix
hicks
tuxes
plebe
twits
abash
twixt
wacko
primp
nabla
girts
miffs
emote
xerox
rebid
shahs
rutty
grout
grift
deify
biddy
kopek
semis
bries
acmes
piton
hussy
torts
disco
whore
boozy
gibed
vamps
amour
soppy
gonzo
durst
wader
tutus
perms
catty
glitz
brigs
nerds
barmy
gizmo
owlet
sayer
molls
shard
whops
comps
corer
colas
matte
droid
ploys
vapid
cairn
deism
mixup
yikes
prosy
raker
flubs
whish
reify
craps
shags
clone
hazed
macho
recto
refix
drams
biker
aquas
porky
doyen
exude
goofs
divvy
noels
jived
hulky
cager
harpy
oldie
vivas
admix
codas
zilch
deist
orcas
retro
pilaf
parse
rants
zingy
toddy
chiff
micro
veeps
girly
nexus
demos
bibbs
antes
lulus
gnarl
zippy
ivied
epees
wimps
tromp
grail
yoyos
poufs
hales
roust
cabal
rawer
pampa
mosey
kefir
burgs
unmet
cuspy
boobs
boons
hypes
dynes
nards
lanai
yogis
sepal
quark
toked
prate
ayins
hawed
swigs
vitas
toker
doper
bossa
linty
foist
mondo
stash
kayos
twerp
zesty
capon
wimpy
rewed
fungo
tarot
frosh
kabob
pinko
redid
mimeo
heist
tarps
lamas
sutra
dinar
whams
busty
spays
mambo
nabob
preps
odour
cabby
conks
sluff
dados
houri
swart
balms
gutsy
faxed
egads
pushy
retry
agora
drubs
daffy
chits
mufti
karma
lotto
toffs
burps
deuce
zings
kappa
clads
doggy
duper
scams
ogler
mimes
throe
zetas
waled
promo
blats
muffs
oinks
viand
coset
finks
faddy
minis
snafu
sauna
usury
muxes
craws
stats
condo
coxes
loopy
dorms
ascot
dippy
execs
dopey
envoi
umpty
gismo
fazed
strop
jives
slims
batik
pings
sonly
leggo
pekoe
prawn
luaus
campy
oodle
prexy
proms
touts
ogles
tweet
toady
naiad
hider
nuked
fatso
sluts
obits
narcs
tyros
delis
wooer
hyped
poset
byway
texas
scrod
avows
futon
torte
tuple
carom
kebab
tamps
jilts
duals
artsy
repro
modem
toped
psych
sicko
klutz
tarns
coxed
drays
cloys
anded
piker
aimer
suras
limos
flack
hapax
dutch
mucky
shire
klieg
staph
layup
tokes
axing
toper
duvet
cowry
profs
blahs
addle
sudsy
batty
coifs
suety
gabby
hafta
pitas
gouda
deice
taupe
topes
duchy
nitro
carny
limey
orals
hirer
taxer
roils
ruble
elate
dolor
wryer
snots
quais
coked
gimel
gorse
minas
goest
agape
manta
jings
iliac
admen
offen
cills
offal
lotta
bolas
thwap
alway
boggy
donna
locos
belay
gluey
bitsy
mimsy
hilar
outta
vroom
fetal
raths
renal
dyads
crocs
vires
culpa
kivas
feist
teats
thats
yawls
whens
abaca
ohhhh
aphis
fusty
eclat
perdu
mayst
exeat
molly
supra
wetly
plasm
buffa
semen
pukka
tagua
paras
stoat
secco
carte
haute
molal
shads
forma
ovoid
pions
modus
bueno
rheum
scurf
parer
ephah
doest
sprue
flams
molto
dieth
choos
miked
bronx
goopy
bally
plumy
moony
morts
yourn
bipod
spume
algal
ambit
mucho
spued
dozer
harum
groat
skint
laude
thrum
pappy
oncet
rimed
gigue
limed
plein
redly
humpf
lites
seest
grebe
absit
thanx
pshaw
yawps
plats
payed
areal
tilth
youse
gwine
thees
watsa
lento
spitz
yawed
gipsy
sprat
cornu
amahs
blowy
wahoo
lubra
mecum
whooo
coqui
sabra
edema
mrads
dicot
astro
kited
ouzel
didos
grata
bonne
axmen
klunk
summa
laves
purls
yawny
teary
masse
largo
bazar
pssst
sylph
lulab
toque
fugit
plunk
ortho
lucre
cooch
whipt
folky
tyres
wheee
corky
injun
solon
didot
kerfs
rayed
wassa
chile
begat
nippy
litre
magna
rebox
hydro
milch
brent
gyves
lazed
feued
mavis
inapt
baulk
casus
scrum
wised
fossa
dower
kyrie
bhoys
scuse
feuar
ohmic
juste
ukase
beaux
tusky
orate
musta
lardy
intra
quiff
epsom
neath
ocher
tared
homme
mezzo
corms
psoas
beaky
terry
infra
spivs
tuans
belli
bergs
anima
weirs
mahua
scops
manse
titre
curia
kebob
cycad
talky
fucks
tapis
amide
dolce
sloes
jakes
russe
blash
tutti
pruta
panga
blebs
tench
swarf
herem
missy
merse
pawky
limen
vivre
chert
unsee
tiros
brack
foots
welsh
fosse
knops
ileum
noire
firma
podgy
laird
thunk
shute
rowan
shoji
poesy
uncap
fames
glees
costa
turps
fores
solum
imago
byres
fondu
coney
polis
dictu
kraal
sherd
mumbo
wroth
chars
unbox
vacuo
slued
weest
hades
wiled
syncs
muser
excon
hoars
sibyl
passe
joeys
lotsa
lepta
shays
bocks
endue
darer
nones
ileus
plash
busby
wheal
buffo
yobbo
biles
poxes
rooty
licit
terce
bromo
hayey
dweeb
imbed
saran
bruit
punky
softs
biffs
loppy
agars
aquae
livre
biome
bunds
shews
diems
ginny
degum
polos
desex
unman
dungy
vitam
wedgy
glebe
apers
ridgy
roids
wifey
vapes
whoas
bunko
yolky
ulnas
reeky
bodge
brant
davit
deque
liker
jenny
tacts
fulls
treap
ligne
acked
refry
vower
aargh
churl
momma
gaols
whump
arras
marls
tiler
grogs
memes
midis
tided
haler
duces
twiny
poste
unrig
prise
drabs
quids
facer
spier
baric
geoid
remap
trier
gunks
steno
stoma
airer
ovate
torah
apian
smuts
pocks
yurts
exurb
defog
nuder
bosky
nimbi
mothy
joyed
labia
pards
jammy
bigly
faxer
hoppy
nurbs
cotes
dishy
vised
celeb
pismo
casas
withs
dodgy
scudi
mungs
muons
ureas
ioctl
unhip
krone
sager
verst
expat
gronk
uvula
shawm
bilgy
braes
cento
webby
lippy
gamic
lordy
mazed
tings
shoat
faery
wirer
diazo
carer
rater
greps
rente
zloty
viers
unapt
poops
fecal
kepis
taxon
eyers
wonts
spina
stoae
yenta
pooey
buret
japan
bedew
hafts
selfs
oared
herby
pryer
oakum
dinks
titty
sepoy
penes
fusee
winey
gimps
nihil
rille
giber
ousel
umiak
cuppy
hames
shits
azine
glads
tacet
bumph
coyer
honky
gamer
gooky
waspy
sedgy
bents
varia
djinn
junco
pubic
wilco
lazes
idyls
lupus
rives
snood
schmo
spazz
finis
noter
pavan
orbed
bates
pipet
baddy
goers
shako
stets
sebum
seeth
lobar
raver
ajuga
riced
velds
dribs
ville
dhows
unsew
halma
krona
limby
jiffs
treys
bauds
pffft
mimer
plebs
caner
jiber
cuppa
washy
chuff
unarm
yukky
styes
waker
flaks
maces
rimes
gimpy
guano
liras
kapok
scuds
bwana
oring
aider
prier
klugy
monte
golem
velar
firer
pieta
umbel
campo
unpeg
fovea
abeam
boson
asker
goths
vocab
vined
trows
tikis
loper
indie
boffs
spang
grapy
tater
ichor
kilty
lochs
supes
degas
flics
torsi
beths
weber
resaw
lawny
coven
mujik
relet
therm
heigh
shnor
trued
zayin
liest
barfs
bassi
qophs
roily
flabs
punny
okras
hanks
dipso
nerfs
fauns
calla
pseud
lurer
magus
obeah
atria
twink
palmy
pocky
pends
recta
plonk
slaws
keens
nicad
pones
inker
whews
groks
mosts
trews
ulnar
gyppy
cocas
expos
eruct
oiler
vacua
dreck
dater
arums
tubal
voxel
dixit
beery
assai
lades
actin
ghoti
buzzy
meads
grody
ribby
clews
creme
email
pyxie
kulak
bocci
rived
duddy
hoper
lapin
wonks
petri
phial
fugal
holon
boomy
duomo
musos
shier
hayer
porgy
hived
litho
fisty
stagy
luvya
maria
smogs
asana
yogic
slomo
fawny
amine
wefts
gonad
twirp
brava
plyer
fermi
loges
niter
revet
unate
gyved
totty
zappy
honer
giros
dicer
calks
luxes
monad
cruft
quoin
fumer
amped
shlep
vinca
yahoo
vulva
zooey
dryad
nixie
moper
iambs
lunes
nudie
limns
weals
nohow
miaow
gouts
mynas
mazer
kikes
oxeye
stoup
jujus
debar
pubes
taels
defun
rands
blear
paver
goosy
sprog
oleos
toffy
pawer
maced
crits
kluge
tubed
sahib
ganef
scats
sputa
vaned
acned
taxol
plink
oweth
tribs
resay
boule
thous
haply
glans
maxis
bezel
antis
porks
quoit
alkyd
glary
beamy
hexad
bonks
tecum
kerbs
filar
frier
redux
abuzz
fader
shoer
couth
trues
guyed
goony
booky
fuzes
hurly
genet
hodad
calix
filer
pawls
iodic
utero
henge
unsay
liers
piing
weald
sexed
folic
poxed
cunts
anile
kiths
becks
tatty
plena
rebar
abled
toyer
attar
teaks
aioli
awing
anent
feces
redip
wists
prats
mesne
muter
smurf
owest
bahts
lossy
ftped
hunky
hoers
slier
sicks
fatly
delft
hiver
himbo
pengo
busks
loxes
zonks
ilium
aport
ikons
mulct
reeve
civvy
canna
barfy
kaiak
scudo
knout
gaper
bhang
pease
uteri
lases
paten
rasae
axels
stoas
ombre
styli
gunky
hazer
kenaf
ahoys
ammos
weeny
urger
kudzu
paren
bolos
fetor
nitty
techy
lieth
somas
darky
villi
gluon
janes
cants
farts
socle
jinns
ruing
slily
ricer
hadda
wowee
rices
nerts
cauls
swive
lilty
micks
arity
pasha
finif
oinky
gutty
tetra
wises
wolds
balds
picot
whats
shiki
bungs
snarf
legos
dungs
stogy
berms
tangs
vails
roods
morel
sware
elans
latus
gules
razer
doxie
buena
overs
gutta
zincs
nates
kirks
tikes
donee
jerry
mohel
ceder
doges
unmap
folia
rawly
snark
topoi
ceils
immix
yores
diest
bubba
pomps
forky
turdy
lawzy
poohs
worts
gloms
beano
muley
barky
tunny
auric
funks
gaffs
cordy
curdy
lisle
toric
soyas
reman
mungy
carpy
apish
oaten
gappy
aurae
bract
rooky
axled
burry
sizer
proem
turfy
impro
mashy
miens
nonny
olios
grook
sates
agley
corgi
dashy
doser
dildo
apsos
xored
laker
playa
selah
malty
dulse
frigs
demit
whoso
rials
sawer
spics
bedim
snugs
fanin
azoic
icers
suers
wizen
koine
topos
shirr
rifer
feral
laded
lased
turds
swede
easts
cozen
unhit
pally
aitch
sedum
coper
ruche
geeks
swags
etext
algin
offed
ninja
holer
doter
toter
besot
dicut
macer
peens
pewit
redox
poler
yecch
fluky
doeth
twats
cruds
bebug
bider
stele
hexer
wests
gluer
pilau
abaft
whelm
lacer
inode
tabus
gator
cuing
refly
luted
cukes
bairn
bight
arses
crump
loggy
blini
spoor
toyon
harks
wazoo
fenny
naves
keyer
tufas
morph
rajas
typal
spiff
oxlip
unban
mussy
finny
rimer
login
molas
cirri
huzza
agone
unsex
unwon
peats
toile
zombi
dewed
nooky
alkyl
ixnay
dovey
holey
cuber
amyls
podia
chino
apnea
prims
lycra
johns
primo
fatwa
egger
hempy
snook
hying
fuzed
barms
crink
moots
yerba
rhumb
unarc
direr
munge
eland
nares
wrier
noddy
atilt
jukes
ender
thens
unfix
doggo
zooks
diddy
shmoo
brusk
prest
curer
pasts
kelpy
bocce
kicky
taros
lings
dicky
nerdy
abend
stela
biggy
laved
baldy
pubis
gooks
wonky
stied
hypos
assed
spumy
osier
roble
rumba
biffy
pupal



=== ./static/js/game.js ===
// ./static/js/game.js
import { selfId } from 'https://esm.run/trystero/torrent';
import { hitSound, victorySound, defeatSound, totalShipCells } from './config.js';
import { allShipsPlaced, createBoard, selectNextShip, addPlacementListeners, addAttackListeners } from './board.js';

export function startGame(state, statusEl, orientationBtn, resetBtn, rematchBtn) {
  state.gameStarted = true;
  orientationBtn.style.display = "none";
  resetBtn.style.display = "none";
  rematchBtn.style.display = "none";
  statusEl.textContent = "Status: Game started!";
  // Dynamically get opponent ID
  const peers = Object.keys(state.room.getPeers());
  if (peers.length !== 1) {
    statusEl.textContent = "Status: Error - Must be exactly 2 players.";
    console.error('Unexpected number of peers:', peers.length);
    state.gameStarted = false;
    return;
  }
  const opponentId = peers[0];
  if (selfId === opponentId) {
    statusEl.textContent = "Status: Error - Duplicate peer ID detected. This usually happens when testing both players in the same browser (peer IDs are persisted in localStorage). Try using different browsers, incognito mode for one player, or clearing localStorage.";
    state.gameStarted = false;
    return;
  }
  state.opponentId = opponentId;
  // Decide who starts: lexicographic by selfId and opponentId
  if (selfId < opponentId) {
    state.myTurn = true;
    statusEl.textContent = "Status: Your turn!";
  } else {
    state.myTurn = false;
    statusEl.textContent = "Status: Opponent's turn...";
  }
  // Remove placement listeners from my board
  state.myBoard.flat().forEach(cell => {
    cell.el.removeEventListener("click", state.placementClickHandler);
    cell.el.removeEventListener("mouseover", state.previewHandler);
    cell.el.removeEventListener("mouseout", state.clearHandler);
  });
  state.save();
}

export function resetGame(state, myBoardEl, opponentBoardEl, statusEl, readyBtn, rematchBtn, orientationBtn, resetBtn) {
  if (state.roomId) {
    localStorage.removeItem(`battleship-state-${state.roomId}`);
  }
  state.myBoard = createBoard(myBoardEl);
  state.opponentBoard = createBoard(opponentBoardEl);
  state.shipsToPlace.forEach(ship => {
    ship.placed = false;
    ship.positions = [];
  });
  selectNextShip(state, statusEl);
  state.myHits = 0;
  state.opponentHits = 0;
  state.ready = false;
  state.opponentReady = false;
  state.rematchReady = false;
  state.opponentRematchReady = false;
  state.gameStarted = false;
  state.sunkOpponentShips = [];
  state.opponentId = null;
  state.opponentConnected = false;
  readyBtn.style.display = "none";
  rematchBtn.style.display = "none";
  rematchBtn.disabled = false;
  readyBtn.disabled = false;
  orientationBtn.style.display = "block";
  resetBtn.style.display = "none";
  // Clear chat log
  const chatLog = document.getElementById('chat-log');
  if (chatLog) chatLog.innerHTML = '';
  // Re-add placement listeners to my board
  addPlacementListeners(state.myBoard, state);
  // Re-add attack listeners to opponent board
  addAttackListeners(state.opponentBoard, state);
  // Reset target list
  document.querySelectorAll('.ship-rep.sunk').forEach(el => el.classList.remove('sunk'));
  // Manually check for connected peers after reset (since room is persistent)
  if (state.room) {
    const peers = Object.keys(state.room.getPeers());
    if (peers.length === 1) {
      state.opponentId = peers[0];
      state.opponentConnected = true;
      statusEl.textContent = "Status: Connected. Place ships for the next game.";
    } else {
      statusEl.textContent = "Status: Waiting for opponent... Place ships when connected.";
    }
  } else {
    statusEl.textContent = "Status: No room. Please reconnect.";
  }
}

export function handleMove(x, y, state, statusEl, rematchBtn) {
  if (!state.gameStarted) return;
  const cell = state.myBoard[y][x];
  if (cell.attacked) return; // Should not happen
  cell.attacked = true;
  let hit = false;
  let surrounds = [];
  let sunkSize = undefined;
  if (cell.hasShip) {
    cell.hit = true;
    cell.el.classList.add("hit");
    hit = true;
    state.opponentHits++;
    if (!state.isMuted) hitSound.play().catch(() => {});
    if ('vibrate' in navigator) {
      navigator.vibrate(200);
    }
    const hitPos = { x, y };
    const sunkShip = state.shipsToPlace.find(ship => ship.positions.some(p => p.x === hitPos.x && p.y === hitPos.y));
    if (sunkShip) {
      const hitPositions = sunkShip.positions.filter(p => state.myBoard[p.y][p.x].hit);
      const hitCount = hitPositions.length;
      const isSunk = hitCount === sunkShip.size;
      if (isSunk) {
        sunkSize = sunkShip.size;
      }
      const surroundSet = new Set();
      const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];
      const diagDirs = [[-1, -1], [-1, 1], [1, -1], [1, 1]];
      if (isSunk) {
        // Mark all around the entire ship
        sunkShip.positions.forEach(pos => {
          dirs.forEach(([dx, dy]) => {
            const nx = pos.x + dx;
            const ny = pos.y + dy;
            if (nx >= 0 && nx < 10 && ny >= 0 && ny < 10 && !state.myBoard[ny][nx].attacked) {
              surroundSet.add(`${nx},${ny}`);
            }
          });
        });
      } else {
        // Not sunk, determine direction from hit positions
        const isHorizontal = hitPositions.every(p => p.y === hitPositions[0].y);
        const isVertical = hitPositions.every(p => p.x === hitPositions[0].x);
        let clusters = [];
        if (isHorizontal) {
          const y = hitPositions[0].y;
          const hitXs = hitPositions.map(p => p.x).sort((a, b) => a - b);
          let currentCluster = [hitXs[0]];
          for (let i = 1; i < hitXs.length; i++) {
            if (hitXs[i] === hitXs[i - 1] + 1) {
              currentCluster.push(hitXs[i]);
            } else {
              clusters.push(currentCluster);
              currentCluster = [hitXs[i]];
            }
          }
          clusters.push(currentCluster);
          clusters.forEach(cluster => {
            const clusterSize = cluster.length;
            const minX = cluster[0];
            const maxX = cluster[cluster.length - 1];
            if (clusterSize === 1) {
              // Mark only 4 diagonals
              diagDirs.forEach(([dx, dy]) => {
                const nx = minX + dx;
                const ny = y + dy;
                if (nx >= 0 && nx < 10 && ny >= 0 && ny < 10 && !state.myBoard[ny][nx].attacked) {
                  surroundSet.add(`${nx},${ny}`);
                }
              });
            } else {
              // Mark all adjacent except the two extensions
              const extSet = new Set();
              const ext1 = minX - 1;
              if (ext1 >= 0) extSet.add(`${ext1},${y}`);
              const ext2 = maxX + 1;
              if (ext2 < 10) extSet.add(`${ext2},${y}`);
              for (let cx = minX; cx <= maxX; cx++) {
                dirs.forEach(([dx, dy]) => {
                  const nx = cx + dx;
                  const ny = y + dy;
                  if (nx >= 0 && nx < 10 && ny >= 0 && ny < 10 && !state.myBoard[ny][nx].attacked && !extSet.has(`${nx},${ny}`)) {
                    surroundSet.add(`${nx},${ny}`);
                  }
                });
              }
            }
          });
        } else if (isVertical) {
          const x = hitPositions[0].x;
          const hitYs = hitPositions.map(p => p.y).sort((a, b) => a - b);
          let currentCluster = [hitYs[0]];
          for (let i = 1; i < hitYs.length; i++) {
            if (hitYs[i] === hitYs[i - 1] + 1) {
              currentCluster.push(hitYs[i]);
            } else {
              clusters.push(currentCluster);
              currentCluster = [hitYs[i]];
            }
          }
          clusters.push(currentCluster);
          clusters.forEach(cluster => {
            const clusterSize = cluster.length;
            const minY = cluster[0];
            const maxY = cluster[cluster.length - 1];
            if (clusterSize === 1) {
              // Mark only 4 diagonals
              diagDirs.forEach(([dx, dy]) => {
                const nx = x + dx;
                const ny = minY + dy;
                if (nx >= 0 && nx < 10 && ny >= 0 && ny < 10 && !state.myBoard[ny][nx].attacked) {
                  surroundSet.add(`${nx},${ny}`);
                }
              });
            } else {
              // Mark all adjacent except the two extensions
              const extSet = new Set();
              const ext1 = minY - 1;
              if (ext1 >= 0) extSet.add(`${x},${ext1}`);
              const ext2 = maxY + 1;
              if (ext2 < 10) extSet.add(`${x},${ext2}`);
              for (let cy = minY; cy <= maxY; cy++) {
                dirs.forEach(([dx, dy]) => {
                  const nx = x + dx;
                  const ny = cy + dy;
                  if (nx >= 0 && nx < 10 && ny >= 0 && ny < 10 && !state.myBoard[ny][nx].attacked && !extSet.has(`${nx},${ny}`)) {
                    surroundSet.add(`${nx},${ny}`);
                  }
                });
              }
            }
          });
        }
      }
      surrounds = Array.from(surroundSet).map(key => {
        const [sx, sy] = key.split(',');
        return { x: parseInt(sx), y: parseInt(sy) };
      });
    }
    if (state.opponentHits === totalShipCells) {
      statusEl.textContent = "Status: You lost!";
      if (!state.isMuted) defeatSound.play().catch(() => {});
      if ('vibrate' in navigator) {
        navigator.vibrate(500);
      }
      state.gameStarted = false;
      rematchBtn.style.display = "block";
    }
  } else {
    cell.el.classList.add("miss");
  }
  // Send result
  console.log('Sending result:', { type: "result", x, y, hit, surrounds, sunkSize });
  state.sendResult({ type: "result", x, y, hit, surrounds, sunkSize });
  if (!hit) {
    state.myTurn = true;
    statusEl.textContent = "Status: Your turn!";
  } else if (state.opponentHits < totalShipCells) {
    statusEl.textContent = "Status: Opponent's turn..."; // Opponent hit, so they continue (only if not game over)
  }
  state.save();
}

export function handleResult(data, state, statusEl, rematchBtn) {
  if (!state.gameStarted) return;
  const cell = state.opponentBoard[data.y][data.x].el; // Note: opponentBoard uses .el
  if (data.hit) {
    cell.classList.add("hit");
    state.myHits++;
    if (!state.isMuted) hitSound.play().catch(() => {});
    if ('vibrate' in navigator) {
      navigator.vibrate(200);
    }
    if (data.sunkSize) {
      state.sunkOpponentShips.push(data.sunkSize);
      const shipRep = document.querySelector(`.ship-rep[data-size="${data.sunkSize}"]:not(.sunk)`);
      if (shipRep) {
        shipRep.classList.add("sunk");
      }
    }
    data.surrounds.forEach(s => {
      const sCell = state.opponentBoard[s.y][s.x].el;
      sCell.classList.add("deduced-miss");
    });
    if (state.myHits === totalShipCells) {
      statusEl.textContent = "Status: You win!";
      if (!state.isMuted) victorySound.play().catch(() => {});
      if ('vibrate' in navigator) {
        navigator.vibrate(500);
      }
      state.gameStarted = false;
      rematchBtn.style.display = "block";
      return;
    }
    state.myTurn = true;
    statusEl.textContent = "Status: Your turn!"; // Hit, continue
  } else {
    cell.classList.add("miss");
    state.myTurn = false;
    statusEl.textContent = "Status: Opponent's turn..."; // Miss, opponent's turn
  }
  state.save();
}


